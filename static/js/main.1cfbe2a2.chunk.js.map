{"version":3,"sources":["psges/Posts/Posts.module.css","psges/Login/Login.module.css","component/ui/Input/Input.module.css","component/ui/Button/Button.module.css","psges/Profile/Profile.module.css","component/Navbar/Navbar.module.css","component/Loader/Loader.module.css","psges/Home/Home.tsx","component/ui/Input/Input.tsx","component/ui/Button/Button.tsx","store/auth/auth.ts","psges/Login/Login.tsx","store/auth/types.ts","api/apiPosts.ts","store/posts/post.ts","store/posts/types.ts","psges/Posts/Post.tsx","component/Loader/Loader.tsx","psges/Posts/Posts.tsx","psges/Profile/Profile.tsx","component/Navbar/Navbar.tsx","App.tsx","serviceWorker.ts","store/auth/authReducer.ts","store/posts/postsReducer.ts","store/store.ts","index.tsx"],"names":["module","exports","Home","style","paddingTop","fontSize","fontWeight","Component","Input","props","className","cls","authBlockInput","htmlFor","label","authLabel","placeholder","type","value","onChange","e","Button","button","onClick","text","Login","state","isFormValid","formControls","name","password","handleSubmit","preventDefault","handleChange","control","currentTarget","setState","handleClickAuth","username","Number","expirationData","Date","getTime","timeSession","toString","localStorage","setItem","autoLogout","updateSession","session","authError","renderInputs","Object","keys","map","index","key","this","to","auth","onSubmit","authForm","error","errorMessage","connect","newSession","time","dispatch","setTimeout","removeItem","apiPosts","getPosts","axios","get","then","response","data","successPosts","posts","Post","post","title","body","Loader","Posts","renderPosts","id","Math","random","fetchPosts","a","Profile","profile","Navbar","menuNav","exact","App","path","render","Boolean","window","location","hostname","match","initialState","authReducer","action","postsReducer","rootReducer","combineReducers","store","createStore","applyMiddleware","thunk","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"0GACAA,EAAOC,QAAU,CAAC,MAAQ,qBAAqB,KAAO,oBAAoB,MAAQ,uB,mBCAlFD,EAAOC,QAAU,CAAC,KAAO,oBAAoB,SAAW,wBAAwB,MAAQ,uB,mBCAxFD,EAAOC,QAAU,CAAC,eAAiB,8BAA8B,UAAY,2B,mBCA7ED,EAAOC,QAAU,CAAC,OAAS,yB,mBCA3BD,EAAOC,QAAU,CAAC,QAAU,2B,mBCA5BD,EAAOC,QAAU,CAAC,QAAU,0B,4ECA5BD,EAAOC,QAAU,CAAC,gBAAgB,gC,qICWnBC,E,uKARP,OACI,wBAAIC,MAAO,CAACC,WAAY,OAAQC,SAAU,OAAQC,WAAY,SAA9D,iB,GAHOC,a,wBCsBJC,EAhBA,SAACC,GACZ,OACI,yBAAKC,UAAWC,IAAIC,gBAChB,2BAAOC,QAASJ,EAAMK,MAAOJ,UAAWC,IAAII,WACxC,8BAAON,EAAMO,aACb,2BACIC,KAAMR,EAAMQ,KACZC,MAAOT,EAAMS,MACbF,YAAaP,EAAMO,YACnBG,SAAU,SAACC,GAAD,OAAOX,EAAMU,SAASC,S,kCCMrCC,EAfA,SAACZ,GACZ,OACI,6BACI,4BACIC,UAAWC,IAAIW,OACfC,QAASd,EAAMc,SAEf,8BACKd,EAAMe,S,QCOpB,I,QCkBDC,E,4MACFC,MAAQ,CACJC,aAAa,EACbC,aAAc,CACVC,KAAM,CACFX,MAAO,GACPD,KAAM,OACNH,MAAO,OACPE,YAAa,iEAEjBc,SAAU,CACNZ,MAAO,GACPD,KAAM,WACNH,MAAO,uCACPE,YAAa,qF,EAKzBe,aAAe,SAACX,GACZA,EAAEY,kB,EAGNC,aAAe,SAACb,EAAwCS,GACpD,IAAMD,EAAY,eAAO,EAAKF,MAAME,cAC9BM,EAAO,eAAON,EAAaC,IACjCK,EAAQhB,MAAQE,EAAEe,cAAcjB,MAChCU,EAAaC,GAAQK,EAErB,EAAKE,SAAS,CACVR,kB,EAIRS,gBAAkB,WACd,GACI,EAAKX,MAAME,aAAaC,KAAKX,QAAU,EAAKT,MAAM6B,UAC/CC,OAAO,EAAKb,MAAME,aAAaE,SAASZ,SAAW,EAAKT,MAAMqB,SACpE,CACG,IACMU,EAAiB,IAAIC,MAAK,IAAIA,MAAOC,UAAYC,MAAoBC,WAC3EC,aAAaC,QAAQ,UAAWN,GAChC,EAAK/B,MAAMsC,WAHS,MAIpB,EAAKtC,MAAMuC,eAAe,EAAKvC,MAAMwC,cAErC,EAAKxC,MAAMyC,a,EAInBC,aAAe,WACX,OAAQC,OAAOC,KAAK,EAAK3B,MAAME,cAAgD0B,KAAI,SAACzB,EAAM0B,GACtF,IAAI9C,EAAQ,EAAKiB,MAAME,aAAaC,GACpC,OAAO,kBAAC,EAAD,eACH2B,IAAKD,GACD9C,EAFD,CAGHU,SAAU,SAACC,GAAD,OAAO,EAAKa,aAAab,EAAGS,W,uDAM9C,OAAG4B,KAAKhD,MAAMwC,QAAgB,kBAAC,IAAD,CAAUS,GAAI,aAGxC,yBAAKhD,UAAWC,IAAIgD,MAChB,0BAAMC,SAAUH,KAAK1B,aAAcrB,UAAWC,IAAIkD,UAC7CJ,KAAKN,eACLM,KAAKhD,MAAMqD,OAAS,0BAAMpD,UAAWC,IAAImD,OAAQL,KAAKhD,MAAMsD,cAC7D,kBAAC,EAAD,CAAQvC,KAAM,iCAASD,QAASkC,KAAKpB,wB,GApErC9B,aAqFLyD,eAVS,SAACtC,GACvB,MAAO,CACHI,SAAUJ,EAAMiC,KAAK7B,SACrBQ,SAAUZ,EAAMiC,KAAKrB,SACrBW,QAASvB,EAAMiC,KAAKV,QACpBa,MAAOpC,EAAMiC,KAAKG,MAClBC,aAAcrC,EAAMiC,KAAKI,gBAIS,CAACf,cD3HlC,SAAuBiB,GAC1B,MAAO,CACHhD,KELsB,iBFMtBgC,QAASgB,ICwHuCf,UDpHjD,WACH,MAAO,CACHjC,KEXkB,eD6HyC8B,WDvGxC,SAACmB,GAAD,OAAkB,SAACC,GAC1CC,YAAW,WACPD,GARJtB,aAAawB,WAAW,WACjB,CACHpD,KEjBmB,mBFwBb,IAAPiD,MCoGQF,CAAiEvC,G,0CEnHjE6C,EARE,CACbC,SADa,WAET,OAAOC,IAAMC,IAAa,8CAA8CC,MAAK,SAACC,GAC1E,OAAOA,EAASC,UCFrB,SAASC,EAAaC,GACzB,MAAO,CACH7D,KCN2B,sBDO3B6D,SAID,I,iBEEQC,EATF,SAACtE,GACV,OACI,yBAAKC,UAAWC,IAAIqE,MAChB,wBAAItE,UAAWC,IAAIsE,OAAQxE,EAAMwE,OACjC,2BAAIxE,EAAMyE,QCEPC,G,MAPA,WAEX,OACI,yBAAKzE,UAAU,oBCYjB0E,E,4MAKFC,YAAc,WACV,OAAO,EAAK5E,MAAMqE,MAAMxB,KAAI,SAAC0B,GACzB,OAAO,kBAAC,EAAD,iBAAUA,EAAV,CAAgBxB,IAAKwB,EAAKM,GAAqB,IAAhBC,KAAKC,gB,kEAL/C/B,KAAKhD,MAAMgF,e,+BAUX,OACI,yBAAK/E,UAAWC,IAAImE,OACM,IAArBrB,KAAKhD,MAAMqE,MACN,kBAAC,EAAD,MACArB,KAAK4B,mB,GAhBP9E,aA6BLyD,eANS,SAACtC,GACrB,MAAO,CACHoD,MAAOpD,EAAMoD,MAAMA,SAIa,CAACW,WJpCf,yDAAM,WAAOtB,GAAP,eAAAuB,EAAA,+EAEJpB,EAASC,WAFL,OAElBO,EAFkB,OAGxBX,EAASU,EAAaC,IAHE,uGAAN,wDIoCXd,CAAuCoB,G,iBCrChDO,E,uKAEE,OAAIlC,KAAKhD,MAAMwC,QAGX,yBAAKvC,UAAWC,IAAIiF,SAApB,guIAH2B,kBAAC,IAAD,CAAUlC,GAAI,e,GAF/BnD,aA0BPyD,eANS,SAACtC,GACrB,MAAO,CACHuB,QAASvB,EAAMiC,KAAKV,WAIbe,CAAyB2B,G,wBCdzBE,E,uKAhBP,OACI,yBAAKnF,UAAWC,IAAImF,SAChB,kBAAC,IAAD,CAASpC,GAAI,IAAKqC,OAAK,GAAvB,QAGA,kBAAC,IAAD,CAASrC,GAAI,UAAb,SAGA,kBAAC,IAAD,CAASA,GAAI,YAAb,gB,GAVKnD,a,MCqBNyF,MAhBf,WACI,OACI,6BACI,yBAAKtF,UAAW,aACZ,kBAAC,EAAD,OAEJ,yBAAKA,UAAW,aACZ,kBAAC,IAAD,CAAOuF,KAAM,IAAKF,OAAK,EAACG,OAAQ,kBAAM,kBAAC,EAAD,SACtC,kBAAC,IAAD,CAAOD,KAAM,SAAUC,OAAQ,kBAAM,kBAAC,EAAD,SACrC,kBAAC,IAAD,CAAOD,KAAM,SAAUC,OAAQ,kBAAM,kBAAC,EAAD,SACrC,kBAAC,IAAD,CAAOD,KAAM,WAAYC,OAAQ,kBAAM,kBAAC,EAAD,YCPnCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCRAC,EAAkC,CACpClE,SAAU,QACVR,SAAU,OACVmB,SAAS,EACTa,OAAO,EACPC,aAAc,8OA0BH0C,EAvBK,WAAwC,IAAvC/E,EAAsC,uDAA9B8E,EAAcE,EAAgB,uCACvD,OAAQA,EAAOzF,MACX,IXpBsB,iBWqBlB,OAAO,eACAS,EADP,CAEIuB,QAASyD,EAAOzD,QAChBa,OAAO,IAEf,IXxBmB,cWyBf,OAAO,eACApC,EADP,CAEIuB,SAAS,IAEjB,IX9BkB,aW+Bd,OAAO,eACAvB,EADP,CAEIoC,OAAO,IAEf,QACI,OAAOpC,I,gBCnCb8E,EAAe,CACjB1B,MAAO,IAeI6B,EAZM,WAAwC,IAAvCjF,EAAsC,uDAA9B8E,EAAcE,EAAgB,uCACxD,OAAQA,EAAOzF,MACX,ITR2B,sBSSvB,OAAO,eACAS,EADP,CAEIoD,MAAM,GAAD,mBAAMpD,EAAMoD,OAAZ,YAAsB4B,EAAO5B,UAE1C,QACI,OAAOpD,ICPbkF,GAAcC,YAAgB,CAChClD,KAAM8C,EACN3B,MAAO6B,IAGEG,GAAQC,YAAYH,GAAaI,YAAgBC,MAG9Db,OAAOU,MAAQA,GCLfI,IAAShB,OACL,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAUY,MAAOA,IACb,kBAAC,IAAMK,WAAP,KACA,kBAAC,EAAD,SAIRC,SAASC,eAAe,SJyHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9C,MAAK,SAAA+C,GACJA,EAAaC,gBAEdC,OAAM,SAAA7D,GACL8D,QAAQ9D,MAAMA,EAAM+D,c","file":"static/js/main.1cfbe2a2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"posts\":\"Posts_posts__1Lenr\",\"post\":\"Posts_post__-q0Lc\",\"title\":\"Posts_title__2qNfl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"auth\":\"Login_auth__3hntb\",\"authForm\":\"Login_authForm__1K9Jj\",\"error\":\"Login_error__AwLDk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"authBlockInput\":\"Input_authBlockInput__3x7Nv\",\"authLabel\":\"Input_authLabel__2GGdP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__22ESF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profile\":\"Profile_profile__21TYs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"menuNav\":\"Navbar_menuNav__TFeJ8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"lds-dual-ring\":\"Loader_lds-dual-ring__6uAI3\"};","import React, {Component} from 'react';\r\n\r\nclass Home extends Component {\r\n    render() {\r\n        return (\r\n            <h1 style={{paddingTop: '50px', fontSize: '25px', fontWeight: 'bold'}}>\r\n                Home Page\r\n            </h1>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Home;","import React, {ChangeEvent} from 'react';\r\nimport { IInput } from '../../../psges/Login/Login';\r\nimport cls from  './Input.module.css'\r\n\r\ninterface IProps extends IInput {\r\n    onChange: (e:ChangeEvent<HTMLInputElement>) => void;\r\n}\r\n\r\nconst Input  = (props: IProps) => {\r\n    return (\r\n        <div className={cls.authBlockInput}>\r\n            <label htmlFor={props.label} className={cls.authLabel}>\r\n                <span>{props.placeholder}</span>\r\n                <input\r\n                    type={props.type}\r\n                    value={props.value}\r\n                    placeholder={props.placeholder}\r\n                    onChange={(e) => props.onChange(e)}\r\n                />\r\n            </label>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Input;","import React from \"react\";\r\nimport cls from \"./Button.module.css\";\r\n\r\ninterface IProps {\r\n    text: string\r\n    onClick: () => void\r\n}\r\n\r\nconst Button = (props: IProps) => {\r\n    return (\r\n        <div>\r\n            <button\r\n                className={cls.button}\r\n                onClick={props.onClick}\r\n            >\r\n                <span>\r\n                    {props.text}\r\n                </span>\r\n            </button>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Button;","import {UPDATE_SESSION, SystemActionTypes, AUTH_ERROR, AUTH_LOGOUT} from './types'\r\nimport {Dispatch} from \"redux\";\r\n\r\nexport function updateSession(newSession: boolean): SystemActionTypes {\r\n    return {\r\n        type: UPDATE_SESSION,\r\n        session: newSession\r\n    }\r\n}\r\n\r\nexport function authError(): SystemActionTypes {\r\n    return {\r\n        type: AUTH_ERROR\r\n    }\r\n}\r\n\r\nexport function logout() {\r\n    localStorage.removeItem('session');\r\n    return {\r\n        type: AUTH_LOGOUT\r\n    }\r\n}\r\n\r\nexport const  autoLogout = (time: number) => (dispatch : Dispatch): void => {\r\n    setTimeout(() => {\r\n        dispatch(logout())\r\n    }, time * 1000);\r\n};","import React, {Component} from 'react';\r\nimport Input from \"../../component/ui/Input/Input\";\r\nimport cls from \"./Login.module.css\";\r\nimport Button from \"../../component/ui/Button/Button\";\r\nimport {connect} from \"react-redux\";\r\nimport {RootState} from \"../../store/store\";\r\nimport {authError, autoLogout,  updateSession} from \"../../store/auth/auth\";\r\nimport {Dispatch} from \"redux\";\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nexport type IInput = {\r\n    value: string,\r\n    type: string,\r\n    label: string,\r\n    placeholder: string\r\n}\r\n\r\ntype FormControlsType = {\r\n    name: IInput,\r\n    password: IInput\r\n}\r\n\r\ntype IState = {\r\n    isFormValid: boolean,\r\n    formControls: FormControlsType\r\n}\r\n\r\ninterface IMapStateToProps {\r\n    username: string\r\n    password: number\r\n    session: false\r\n    error: boolean\r\n    errorMessage: string\r\n}\r\n\r\ninterface IMapDispatchToProps {\r\n    updateSession: (session: boolean) => void\r\n    authError: () => void\r\n    autoLogout: (time: number) => void\r\n}\r\n\r\nclass Login extends Component<IMapStateToProps & IMapDispatchToProps, IState> {\r\n    state = {\r\n        isFormValid: false,\r\n        formControls: {\r\n            name: {\r\n                value: '',\r\n                type: 'text',\r\n                label: 'Name',\r\n                placeholder: 'Введите имя'\r\n            },\r\n            password: {\r\n                value: '',\r\n                type: 'password',\r\n                label: 'Пароль',\r\n                placeholder: 'Введите пароль'\r\n            }\r\n        }\r\n    };\r\n\r\n    handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault();\r\n    };\r\n\r\n    handleChange = (e: React.ChangeEvent<HTMLInputElement>, name: keyof FormControlsType) => {\r\n        const formControls = {...this.state.formControls};\r\n        const control = {...formControls[name]};\r\n        control.value = e.currentTarget.value;\r\n        formControls[name] = control;\r\n\r\n        this.setState({\r\n            formControls\r\n        })\r\n    };\r\n\r\n    handleClickAuth = () => {\r\n        if(\r\n            this.state.formControls.name.value === this.props.username\r\n            && Number(this.state.formControls.password.value) === this.props.password\r\n        ){\r\n            const timeSession = 3600;\r\n            const expirationData = new Date(new Date().getTime() + timeSession * 1000).toString();\r\n            localStorage.setItem('session', expirationData);\r\n            this.props.autoLogout(timeSession);\r\n            this.props.updateSession(!this.props.session);\r\n        } else {\r\n            this.props.authError();\r\n        }\r\n    };\r\n\r\n    renderInputs = () => {\r\n        return (Object.keys(this.state.formControls) as Array<keyof FormControlsType>).map((name, index) => {\r\n            let props = this.state.formControls[name];\r\n            return <Input\r\n                key={index}\r\n                {...props}\r\n                onChange={(e) => this.handleChange(e, name)}\r\n            />;\r\n        })\r\n    };\r\n\r\n    render() {\r\n        if(this.props.session) return <Redirect to={'/profile'} />\r\n\r\n        return (\r\n            <div className={cls.auth}>\r\n                <form onSubmit={this.handleSubmit} className={cls.authForm}>\r\n                    {this.renderInputs()}\r\n                    {this.props.error && <span className={cls.error}>{this.props.errorMessage}</span>}\r\n                    <Button text={'Войти'} onClick={this.handleClickAuth}/>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: RootState)  => {\r\n  return {\r\n      password: state.auth.password,\r\n      username: state.auth.username,\r\n      session: state.auth.session,\r\n      error: state.auth.error,\r\n      errorMessage: state.auth.errorMessage\r\n  }\r\n};\r\n\r\nexport default connect(mapStateToProps, {updateSession, authError, autoLogout})(Login);","export const UPDATE_SESSION = 'UPDATE_SESSION';\r\nexport const AUTH_ERROR = 'AUTH_ERROR';\r\nexport const AUTH_LOGOUT = 'AUTH_LOGOUT';\r\n\r\ninterface UpdateSessionAction {\r\n    type: typeof UPDATE_SESSION\r\n    session: boolean\r\n}\r\n\r\ninterface AuthErrorAction {\r\n    type: typeof AUTH_ERROR\r\n}\r\n\r\ninterface AuthLogoutAction {\r\n    type: typeof AUTH_LOGOUT\r\n}\r\n\r\nexport type SystemActionTypes = UpdateSessionAction | AuthErrorAction | AuthLogoutAction","import axios from \"axios\";\r\nimport {IPost} from \"../store/posts/types\";\r\n\r\nconst apiPosts = {\r\n    getPosts(): Promise<IPost[]>{\r\n        return axios.get<IPost[]>('https://jsonplaceholder.typicode.com/posts').then((response) => {\r\n            return response.data\r\n        })\r\n    }\r\n};\r\n\r\nexport default apiPosts;","import {FETCH_SUCCESS_POSTS, IPost} from \"./types\";\r\nimport {Dispatch} from \"redux\";\r\nimport apiPosts from \"../../api/apiPosts\";\r\n\r\nexport function successPosts(posts: IPost[]) {\r\n    return {\r\n        type: FETCH_SUCCESS_POSTS,\r\n        posts\r\n    }\r\n}\r\n\r\nexport const fetchPosts = () => async (dispatch: Dispatch) => {\r\n    try {\r\n        const posts = await apiPosts.getPosts();\r\n        dispatch(successPosts(posts));\r\n    } catch (error) {\r\n\r\n    }\r\n};\r\n\r\n\r\n\r\n","export const FETCH_SUCCESS_POSTS = 'FETCH_SUCCESS_POSTS';\r\n\r\nexport interface IPost {\r\n    userId: number\r\n    id: number\r\n    title: string\r\n    body: string\r\n}\r\n\r\nexport interface FetchSuccessPostAction{\r\n    type: typeof FETCH_SUCCESS_POSTS;\r\n    posts: IPost[]\r\n}","import React from \"react\";\r\nimport {IPost} from \"../../store/posts/types\";\r\nimport cls from \"./Posts.module.css\";\r\n\r\nconst Post = (props: IPost) => {\r\n    return (\r\n        <div className={cls.post}>\r\n            <h5 className={cls.title}>{props.title}</h5>\r\n            <p>{props.body}</p>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Post;","import React from \"react\";\r\nimport './Loader.module.css'\r\n\r\nconst Loader = () => {\r\n    debugger\r\n    return(\r\n        <div className=\"lds-dual-ring\" />\r\n    )\r\n};\r\n\r\nexport default Loader;","import React, {Component} from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {RootState} from \"../../store/store\";\r\nimport {fetchPosts} from \"../../store/posts/post\";\r\nimport {IPost} from \"../../store/posts/types\";\r\nimport cls from \"./Posts.module.css\";\r\nimport Post from \"./Post\";\r\nimport Loader from \"../../component/Loader/Loader\";\r\n\r\ninterface IMapStateToProps {\r\n    posts: any\r\n}\r\n\r\ninterface IMapDispatchToProps {\r\n    fetchPosts: () => void\r\n}\r\n\r\n\r\nclass Posts extends Component<IMapStateToProps & IMapDispatchToProps, any> {\r\n    componentDidMount(): void {\r\n        this.props.fetchPosts();\r\n    }\r\n\r\n    renderPosts = () => {\r\n        return this.props.posts.map((post: IPost) => {\r\n            return <Post {...post} key={post.id + Math.random() * 1000}/>}\r\n        )\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className={cls.posts}>\r\n                {this.props.posts === 0\r\n                    ? <Loader />\r\n                    : this.renderPosts()\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: RootState) => {\r\n    return {\r\n        posts: state.posts.posts\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, {fetchPosts})(Posts);","import React, {Component} from 'react';\r\nimport cls from \"./Profile.module.css\";\r\nimport {RootState} from \"../../store/store\";\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\ninterface IMapStateToProps {\r\n    session: boolean\r\n}\r\n\r\nclass Profile extends Component<IMapStateToProps> {\r\n    render() {\r\n        if(!this.props.session) return <Redirect to={'/login'}/>\r\n\r\n        return (\r\n            <div className={cls.profile}>\r\n                Ясность нашей позиции очевидна: существующая теория предоставляет широкие возможности для направлений\r\n                прогрессивного развития.\r\n                Сделанные на базе интернет-аналитики выводы указаны как претенденты на роль ключевых факторов!\r\n                Следует отметить, что консультация с широким активом играет важную роль в формировании благоприятных перспектив.\r\n                Приятно, граждане, наблюдать, как базовые сценарии поведения пользователей неоднозначны и будут превращены\r\n                в посмешище, хотя само их существование приносит несомненную пользу обществу.\r\n                Высокий уровень вовлечения представителей целевой аудитории является четким доказательством простого факта:\r\n                повышение уровня гражданского сознания прекрасно подходит для реализации глубокомысленных рассуждений.\r\n                Но граница обучения кадров говорит о возможностях благоприятных перспектив.\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: RootState) => {\r\n    return {\r\n        session: state.auth.session\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps)(Profile);","import React, {Component} from 'react';\r\nimport {NavLink} from \"react-router-dom\";\r\nimport cls from \"./Navbar.module.css\";\r\n\r\nclass Navbar extends Component {\r\n    render() {\r\n        return (\r\n            <nav className={cls.menuNav}>\r\n                <NavLink to={'/'} exact>\r\n                    Home\r\n                </NavLink>\r\n                <NavLink to={'/posts'}>\r\n                    Posts\r\n                </NavLink>\r\n                <NavLink to={'/profile'}>\r\n                    Profile\r\n                </NavLink>\r\n            </nav>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\nimport Home from \"./psges/Home/Home\";\nimport Login from \"./psges/Login/Login\";\nimport Posts from \"./psges/Posts/Posts\";\nimport Profile from \"./psges/Profile/Profile\";\nimport Navbar from \"./component/Navbar/Navbar\";\nimport './App.css'\nimport { Route } from 'react-router-dom';\n\nfunction App() {\n    return (\n        <div>\n            <div className={'container'}>\n                <Navbar />\n            </div>\n            <div className={'container'}>\n                <Route path={'/'} exact render={() => <Home/>} />\n                <Route path={'/login'} render={() => <Login />} />\n                <Route path={'/posts'} render={() => <Posts/>} />\n                <Route path={'/profile'} render={() => <Profile/>} />\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {AUTH_ERROR, AUTH_LOGOUT, SystemActionTypes, UPDATE_SESSION} from \"./types\";\r\n\r\nexport interface IInitialStateAuth {\r\n    username: string\r\n    password: number\r\n    session: boolean\r\n    error: boolean\r\n    errorMessage: string\r\n}\r\n\r\nconst initialState: IInitialStateAuth = {\r\n    username: 'Admin',\r\n    password: 123123,\r\n    session: false,\r\n    error: false,\r\n    errorMessage: 'Имя пользователя или пароль введены не верно'\r\n};\r\n\r\nconst authReducer = (state = initialState, action: any) => {\r\n    switch (action.type) {\r\n        case UPDATE_SESSION:\r\n            return {\r\n                ...state,\r\n                session: action.session,\r\n                error: false\r\n            };\r\n        case AUTH_LOGOUT:\r\n            return {\r\n                ...state,\r\n                session: false\r\n            };\r\n        case AUTH_ERROR:\r\n            return {\r\n                ...state,\r\n                error: true\r\n            };\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\nexport default authReducer;","import {FETCH_SUCCESS_POSTS, IPost} from \"./types\";\r\n\r\nconst initialState = {\r\n    posts: [] as IPost[]\r\n};\r\n\r\nconst postsReducer = (state = initialState, action: any) => {\r\n    switch (action.type) {\r\n        case FETCH_SUCCESS_POSTS:\r\n            return {\r\n                ...state,\r\n                posts: [...state.posts, ...action.posts]\r\n            };\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\nexport default postsReducer;","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport authReducer from \"./auth/authReducer\";\r\nimport thunk, {ThunkMiddleware} from \"redux-thunk\";\r\nimport postsReducer from \"./posts/postsReducer\";\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>\r\n\r\nconst rootReducer = combineReducers({\r\n    auth: authReducer,\r\n    posts: postsReducer\r\n});\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk as ThunkMiddleware<RootState, any>));\r\n\r\n// @ts-ignore\r\nwindow.store = store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from \"react-router-dom\";\n\nimport {store} from \"./store/store\";\nimport {Provider} from \"react-redux\";\n\nReactDOM.render(\n    <BrowserRouter>\n        <Provider store={store}>\n            <React.StrictMode>\n            <App/>\n        </React.StrictMode>\n        </Provider>\n    </BrowserRouter>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}